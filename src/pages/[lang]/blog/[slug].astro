---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { getDictionary, isLocale } from '../../../i18n';
import type { Locale } from '../../../i18n/config';
import { getCollection, getEntryBySlug } from 'astro:content';

export const prerender = true;

// Build-time: generate safe static paths for localized blog details
export async function getStaticPaths() {
  const posts = await getCollection('blog');
  const allowed = new Set(['en', 'zh']);
  return posts
    .map((p) => p.slug.split('/').filter(Boolean))
    .filter((parts) => parts.length >= 2 && allowed.has(parts[0]))
    .map((parts) => ({
      params: { lang: parts[0], slug: parts[parts.length - 1] }
    }));
}

// Runtime: resolve entry by lang+slug with a robust fallback
const { lang: rawLang = 'en', slug: rawSlug = '' } = Astro.params;
const lang = String(rawLang) as Locale;
const slug = String(rawSlug);

if (!isLocale(lang)) {
  return Astro.redirect('/en/blog/');
}

// 1) exact match "lang/slug"
let entry = await getEntryBySlug('blog', `${lang}/${slug}`);

// 2) fallback within locale prefix: match last segment
if (!entry) {
  const inLocale = await getCollection('blog', ({ slug }) => slug.startsWith(`${lang}/`));
  entry = inLocale.find((p) => p.slug.split('/').pop() === slug) ?? null;
}

// 3) still missing â†’ go back to the locale's blog index
if (!entry) {
  return Astro.redirect(`/${lang}/blog/`);
}

const dict = await getDictionary(lang);
const { Content, data } = await entry.render();
const title = data?.title ?? '';
const description = data?.description ?? '';
---

<BaseLayout lang={lang} dict={dict} title={title} description={description}>
  <article class="prose mx-auto">
    <Content />
  </article>
</BaseLayout>
