---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { getDictionary, isLocale } from '../../../i18n';
import type { Locale } from '../../../i18n/config';
import { getCollection } from 'astro:content';
import { getI18nStaticPaths } from '../../../lib/i18n';
import { formatDate } from '@i18n/utils';

export const prerender = true;

export async function getStaticPaths() {
  const posts = await getCollection('blog');

  return getI18nStaticPaths().flatMap(({ params: { lang } }) => {
    const entries = posts.filter((post) => post.id.startsWith(`${lang}/`));

    return entries.map((post) => ({
      params: { lang, slug: post.slug.split('/').pop() ?? post.slug }
    }));
  });
}

const { lang, slug } = Astro.params;

if (!isLocale(lang)) {
  return Astro.redirect('/zh/blog/');
}

const locale = lang as Locale;
const posts = await getCollection('blog', ({ id }) => id.startsWith(`${locale}/`));
const entry = posts.find((post) => (post.slug.split('/').pop() ?? post.slug) === slug);

if (!entry) {
  return Astro.redirect(`/${locale}/blog/`);
}

const post = entry;

const dict = await getDictionary(locale);
const published = post.data.pubDate
  ? formatDate(post.data.pubDate, locale)
  : '';
---
<BaseLayout lang={locale} dict={dict} title={post.data.title} description={post.data.description}>
  <article class="post">
    <header class="post__header">
      <p class="post__meta">{dict.blog.publishedOn} {published}</p>
      <h1>{post.data.title}</h1>
      <p class="post__description">{post.data.description}</p>
    </header>
    <section class="post__content">
      <post.Content />
    </section>
  </article>
</BaseLayout>
<style>
  .post {
    display: grid;
    gap: 2rem;
  }

  .post__meta {
    color: color-mix(in srgb, currentColor 65%, transparent);
    font-size: 0.875rem;
  }

  .post__content :global(p) {
    line-height: 1.8;
  }

  .post__content :global(h2) {
    margin-top: 2rem;
  }
</style>
