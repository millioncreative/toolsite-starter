---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { getDictionary, isLocale } from '../../../i18n';
import type { Locale } from '../../../i18n/config';
import { getEntry, getEntryBySlug } from 'astro:content';
import { formatDate } from '../../../utils/locale';

export async function getStaticPaths() {
  // 从内容集合中取所有文章，然后按文件名后缀 .en / .zh 生成路径
  const all = await (await import('astro:content')).getCollection('blog');
  const locales = ['en', 'zh'] as const;

  return locales.flatMap((lang) =>
    all
      .filter((e) => e.id.endsWith(`.${lang}`))
      .map((e) => {
        const slug = e.id.replace(/\.(en|zh)$/, ''); // 去掉语言后缀作为 slug
        return { params: { lang, slug } };
      })
  );
}

const { lang, slug } = Astro.params as { lang: Locale; slug: string };

if (!isLocale(lang)) {
  // 异常 locale 时回退
  return Astro.redirect('/zh/blog/');
}

// i18n 词典
const dict = await getDictionary(lang);

// 找到对应单篇文章（文件名规则：<slug>.<lang>.mdx）
const entry = await getEntryBySlug('blog', `${slug}.${lang}`);
if (!entry) {
  throw new Error(`Post not found: ${slug}.${lang}`);
}

// 渲染 MDX 内容
const { Content } = await entry.render();
const { title, description, pubDate } = entry.data;
---

<BaseLayout lang={lang} dict={dict} title={title} description={description}>
  <article class="prose max-w-none">
    <h1>{title}</h1>
    <p>{formatDate(pubDate, lang)}</p>
    <Content />
  </article>
</BaseLayout>
