---
import BaseLayout from '../../../layouts/BaseLayout.astro';
import { getDictionary, isLocale } from '../../../i18n';
import type { Locale } from '../../../i18n/config';
import { getCollection } from 'astro:content';

export const prerender = true;

/**
 * Build-time: enumerate all localized blog post paths.
 * We read the "blog" collection and for each entry:
 *   - lang is the first path segment of the slug (e.g. "en/foo" -> "en")
 *   - slug is the last path segment (e.g. "en/foo/bar" -> "bar")
 */
export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => {
    const parts = post.slug.split('/');
    const lang = parts[0];
    const tail = parts[parts.length - 1] || post.slug;
    return { params: { lang, slug: tail } };
  });
}

const { lang: langParam, slug: slugParam } = Astro.params;
const lang = (langParam ?? 'en') as string;

if (!isLocale(lang)) {
  // Unknown locale â†’ send user to default locale's blog list to avoid 500s in preview.
  return Astro.redirect('/en/blog/');
}

const locale = lang as Locale;
const dict = await getDictionary(locale);

// Find the exact entry for this locale and slug.
// We accept that the collection slug may be nested (e.g., "en/some/path/my-post").
// So we filter by locale prefix and then match by the last segment.
const posts = await getCollection('blog', ({ slug }) => slug.startsWith(`${locale}/`));
const entry = posts.find((p) => {
  const parts = p.slug.split('/');
  const tail = parts[parts.length - 1] || p.slug;
  return tail === slugParam;
});

if (!entry) {
  // Fallback: go to the locale's blog index. This avoids preview server crashes in CI.
  return Astro.redirect(`/${locale}/blog/`);
}

const { Content, data } = await entry.render();
const title = data?.title ?? '';
const description = data?.description ?? '';
---

<BaseLayout lang={locale} dict={dict} title={title} description={description}>
  <article class="prose mx-auto">
    <header class="mb-8">
      {title && <h1>{title}</h1>}
      {description && <p>{description}</p>}
    </header>
    <Content />
  </article>
</BaseLayout>
