---
// Localized blog detail page: /:lang/blog/:slug

import BaseLayout from '../../../layouts/BaseLayout.astro';
import { getDictionary, isLocale } from '../../../i18n';
import type { Locale } from '../../../i18n/config';
import { getCollection } from 'astro:content';

export const prerender = true;

/**
 * Build-time:
 * Generate safe static paths only for "en" and "zh", and only when the last
 * slug segment is non-empty. Also de-duplicate "lang/slug" keys.
 */
export async function getStaticPaths() {
  const posts = await getCollection('blog');
  const allowed = new Set(['en', 'zh']);
  const seen = new Set<string>();
  const paths: Array<{ params: { lang: string; slug: string } }> = [];

  for (const p of posts) {
    // e.g. "en/some/deep/path/my-post"
    const parts = p.slug.split('/').filter(Boolean);
    if (parts.length < 2) continue;

    const lang = parts[0];
    const tail = parts[parts.length - 1];
    if (!allowed.has(lang) || !tail) continue;

    const key = `${lang}/${tail}`;
    if (seen.has(key)) continue;
    seen.add(key);

    paths.push({ params: { lang, slug: tail } });
  }

  return paths;
}

/**
 * Runtime:
 * Resolve the entry under the locale prefix. If missing, redirect to the
 * locale's blog index to keep preview/e2e stable.
 */
const { lang: rawLang = 'en', slug: rawSlug = '' } = Astro.params;

const langStr = typeof rawLang === 'string' ? rawLang : String(rawLang);
const slugStr = typeof rawSlug === 'string' ? rawSlug : String(rawSlug);

if (!isLocale(langStr as Locale)) {
  return Astro.redirect('/en/blog/');
}
if (!slugStr) {
  return Astro.redirect(`/${langStr}/blog/`);
}

const lang = langStr as Locale;
const dict = await getDictionary(lang);

// Read only posts within the current locale, then match by the last path segment.
const inLocale = await getCollection('blog', ({ slug }) => slug.startsWith(`${lang}/`));
const entry = inLocale.find((p) => {
  const parts = p.slug.split('/').filter(Boolean);
  return parts[parts.length - 1] === slugStr;
});

if (!entry) {
  return Astro.redirect(`/${lang}/blog/`);
}

const { Content, data } = await entry.render();
const title = data?.title ?? '';
const description = data?.description ?? '';
---

<BaseLayout lang={lang} dict={dict} title={title} description={description}>
  <article class="prose mx-auto">
    <header class="mb-8">
      {title && <h1>{title}</h1>}
      {description && <p>{description}</p>}
    </header>
    <Content />
  </article>
</BaseLayout>
